# -*- coding: utf-8 -*-
"""Week 3 - Sep 15 - Data Preprocessing - Morning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Eylk8agBGry1sMtVXDcSpyE-jyosf9lZ

# Assignment 15 sep

Perform Data preprocessing on Titanic dataset
1.Data Collection.
   Please download the dataset from
   https://www.kaggle.com/datasets/yasserh/titanic-dataset

2.Data Preprocessing
    o	Import the Libraries.
    o	Importing the dataset.
    o	Checking for Null Values.
    o	Data Visualization.
    o	Outlier Detection
    o	Splitting Dependent and Independent variables
    o	Perform Encoding
    o	Feature Scaling.
    o	Splitting Data into Train and Test

## 1.Data Collection :

Data Set is collected from the kaggle  website

## 2.Data Preprocessing :

### Importing the Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""### Importing the DataSet"""

df=pd.read_csv("Titanic-Dataset.csv")
df.head()

df.info()

df.describe()

"""### Checking for Null Values"""

df.isnull().any()

df.isnull().sum()

print("Null percentage in columns : ")
for i in df.columns:
    c=df[i].count()
    n=df[i].isnull().sum()
    print(i," : ",(n/(n+c)) * 100)

df.shape

df["Age"].fillna(df["Age"].median(),inplace=True)
df["Embarked"].fillna(df["Embarked"].mode()[0],inplace=True)

print(df["Age"].isnull().any())
print(df["Embarked"].isnull().any())

df.head()

print(df.shape)

df.isnull().any()

"""### Data Visualization"""

sns.pairplot(df)

sns.scatterplot(x="Embarked",y="Age",data=df)

sns.barplot(x="Sex",y="Survived",data=df,hue="Pclass")

sns.barplot(x="Sex",y="Survived",data=df,hue="Parch")

sns.barplot(x="Sex",y="SibSp",data=df,hue="Pclass")

sns.barplot(x="Embarked",y="Survived",data=df)

sns.distplot(df["Survived"])

corr=df.corr(numeric_only=True)
corr

sns.heatmap(corr,annot=True)

"""### Outlier Detection"""

sns.boxplot(df)

sns.boxplot(data=df,x="Age",y="Embarked")

sns.boxplot(data=df,x="Fare",y="Embarked")

sns.boxplot(df["Fare"])

df["Age"].skew()

df["Fare"].skew() # as skewnwss should be -1 to +1 is normal range but here we are having so much outliers and should be treated first

df["Fare"].median()

Q1 = df['Fare'].quantile(0.25)
Q3 = df['Fare'].quantile(0.75)
IQR = Q3 - Q1
width = 1.5
lower_limit = Q1 -(width*IQR)
upper_limit = Q3 + (width*IQR)
df['Fare']=np.where(df['Fare']>upper_limit,14.4542,np.where(df['Fare']<lower_limit,14.4542,df["Fare"]))

sns.boxplot(df["Fare"])

sns.boxplot(df.Age)

print(df.Age.median())
print(df.Age.shape)

p=df["Age"].quantile(0.99)
p1=df['Age'].quantile(0.01)
df=df[df['Age']<=p]
df=df[df['Age']>=p1]

sns.boxplot(df.Age)

sns.boxplot(df)

df.head()

df.shape

"""### Splitting Dependent and Independent variables"""

df.drop(["PassengerId","Name","Ticket","Cabin"],axis=1,inplace=True)
df.head()

X=df.iloc[:,1:]
y=df.iloc[:,:1]

X.head()

y.head()

y=y.squeeze()

type(X)

type(y)

y.head()

"""### Perform Encoding"""

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
X["Sex"]=le.fit_transform(X["Sex"])
mapping1=dict(zip(le.classes_,range(len(le.classes_))))
X["Embarked"]=le.fit_transform(X["Embarked"])
mapping2=dict(zip(le.classes_,range(len(le.classes_))))

print("For Sex Column :",mapping1)
print("For Embarked Column :",mapping2)

X

y

"""### Feature Scaling"""

from sklearn.preprocessing import StandardScaler
ss=StandardScaler()
X_Scale=pd.DataFrame(ss.fit_transform(X),columns=X.columns)

X_Scale.head()

y.head()

X_Scale.shape

y.shape

"""### Splitting Data into Train and Test"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X_Scale,y,test_size=0.2,random_state=0)

print(X_train,"\n",X_test,"\n","\n",y_train,"\n",y_test)

print(X_train.shape,X_test.shape,y_train.shape,y_test.shape)

"""# Preprocessing Done

### Testing for accuracy
"""

from sklearn.linear_model import LogisticRegression
lr=LogisticRegression()
lr.fit(X_train,y_train)

y_predict=lr.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_predict)

print("Accuracy:", accuracy)